# The network is used for the image captioning experiments of LRCN [1].
# Please consider citing LRCN [1] if you use this example in your work.
#
# [1] J. Donahue, L. A. Hendricks, S. Guadarrama, M. Rohrbach, S. Venugopalan,
#     K. Saenko, T. Darrell. "Long-term Recurrent Convolutional Networks for
#     Visual Recognition and Description." arXiv preprint arXiv:1411.4389 (2014).

name: "mrnn_captioning"

# train data layers
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sentence"
  include { phase: TRAIN  not_stage: 'trainval' }
  hdf5_data_param {
    source: "../coco_caption/h5_data/buffer_100/train_aligned_20_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
}

# trainval data layers (for finetuning final model)
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sentence"
  include { phase: TRAIN  stage: 'trainval' }
  hdf5_data_param {
    source: "../coco_caption/h5_data/buffer_100/val_aligned_20_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
}

# test on train data layers
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sentence"
  include {
    phase: TEST
    stage: "test-on-train"
  }
  hdf5_data_param {
    source: "../coco_caption/h5_data/buffer_100/train_aligned_20_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
}
# test on val data layers
layer {
  name: "data"
  type: "HDF5Data"
  top: "cont_sentence"
  top: "input_sentence"
  top: "target_sentence"
  include {
    phase: TEST
    stage: "test-on-val"
  }
  hdf5_data_param {
    source: "../coco_caption/h5_data/buffer_100/val_aligned_20_batches/hdf5_chunk_list.txt"
    batch_size: 20
  }
}
layer {
  name: "embedding"
  type: "Embed"
  bottom: "input_sentence"
  top: "embedded_input_sentence_1"
  param {
    lr_mult: 1
  }
  embed_param {
    bias_term: false
    input_dim: 8801 
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "embedding2"
  type: "InnerProduct"
  bottom: "embedded_input_sentence_1"
  top: "embedded_input_sentence"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "embed-drop"
  type: "Dropout"
  bottom: "embedded_input_sentence"
  top: "embedded_input_sentence"
  dropout_param { dropout_ratio: 0.5 }
}
layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "embedded_input_sentence"
  bottom: "cont_sentence"
  top: "lstm1"
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm-drop"
  type: "Dropout"
  bottom: "lstm1"
  top: "lstm1"
  dropout_param { dropout_ratio: 0.5 }
}
layer {
  name: "concat-lm"
  type: "Concat"
  concat_param{
    axis: 2
  }
  bottom: "embedded_input_sentence"
  bottom: "lstm1"
  top: "lm_concat"
}
#takes from embedding space to one hot vector
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "lm_concat"
  top: "predict"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 8801
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict"
  bottom: "target_sentence"
  top: "cross_entropy_loss"
  loss_weight: 20
  loss_param {
    ignore_label: -1
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "predict"
  bottom: "target_sentence"
  top: "accuracy"
  include { phase: TEST }
  accuracy_param {
    axis: 2
    ignore_label: -1
  }
}
